/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './../pages/__root';
import { Route as RecoveryPasswordImport } from './../pages/recovery-password';
import { Route as LoginImport } from './../pages/login';
import { Route as IndexImport } from './../pages/index';

// Create/Update Routes

const RecoveryPasswordRoute = RecoveryPasswordImport.update({
	id: '/recovery-password',
	path: '/recovery-password',
	getParentRoute: () => rootRoute,
} as any);

const LoginRoute = LoginImport.update({
	id: '/login',
	path: '/login',
	getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
	id: '/',
	path: '/',
	getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
	interface FileRoutesByPath {
		'/': {
			id: '/';
			path: '/';
			fullPath: '/';
			preLoaderRoute: typeof IndexImport;
			parentRoute: typeof rootRoute;
		};
		'/login': {
			id: '/login';
			path: '/login';
			fullPath: '/login';
			preLoaderRoute: typeof LoginImport;
			parentRoute: typeof rootRoute;
		};
		'/recovery-password': {
			id: '/recovery-password';
			path: '/recovery-password';
			fullPath: '/recovery-password';
			preLoaderRoute: typeof RecoveryPasswordImport;
			parentRoute: typeof rootRoute;
		};
	}
}

// Create and export the route tree

export interface FileRoutesByFullPath {
	'/': typeof IndexRoute;
	'/login': typeof LoginRoute;
	'/recovery-password': typeof RecoveryPasswordRoute;
}

export interface FileRoutesByTo {
	'/': typeof IndexRoute;
	'/login': typeof LoginRoute;
	'/recovery-password': typeof RecoveryPasswordRoute;
}

export interface FileRoutesById {
	__root__: typeof rootRoute;
	'/': typeof IndexRoute;
	'/login': typeof LoginRoute;
	'/recovery-password': typeof RecoveryPasswordRoute;
}

export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath;
	fullPaths: '/' | '/login' | '/recovery-password';
	fileRoutesByTo: FileRoutesByTo;
	to: '/' | '/login' | '/recovery-password';
	id: '__root__' | '/' | '/login' | '/recovery-password';
	fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
	IndexRoute: typeof IndexRoute;
	LoginRoute: typeof LoginRoute;
	RecoveryPasswordRoute: typeof RecoveryPasswordRoute;
}

const rootRouteChildren: RootRouteChildren = {
	IndexRoute: IndexRoute,
	LoginRoute: LoginRoute,
	RecoveryPasswordRoute: RecoveryPasswordRoute,
};

export const routeTree = rootRoute
	._addFileChildren(rootRouteChildren)
	._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/recovery-password"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/recovery-password": {
      "filePath": "recovery-password.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
